import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as react from 'react';
import { ComponentProps, ElementType } from 'react';
import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_util from '@stitches/react/types/util';

declare const Button: _stitches_react_types_styled_component.StyledComponent<"button", {
    variant?: "primary" | "secondary" | "tertiary" | "greenDark" | "greenLight" | undefined;
    size?: "md" | "full" | undefined;
}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface ButtonProps extends ComponentProps<typeof Button> {
    as?: ElementType;
}

declare const Input: _stitches_react_types_styled_component.StyledComponent<"input", {}, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

interface TextInputProps extends ComponentProps<typeof Input> {
    title: string;
    name: string;
}
declare const TextInput: react.ForwardRefExoticComponent<any>;

declare const styled: <Type extends keyof JSX.IntrinsicElements | React.ComponentType<any> | _stitches_react_types_util.Function, Composers extends (string | React.ComponentType<any> | _stitches_react_types_util.Function | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ComponentType<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : _stitches_react_types_util.WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.StyledComponent<Type, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {}, _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const css: <Composers extends (string | React.ExoticComponent<any> | React.JSXElementConstructor<any> | _stitches_react_types_util.Function | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ExoticComponent<any> | react.JSXElementConstructor<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : _stitches_react_types_util.WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {}, CSS>;
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{}, {
        colors: {
            white: string;
            black: string;
            linkActive: string;
            linkVisited: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            blueA100: string;
            blueA200: string;
            blueA400: string;
            blueA700: string;
            beige50: string;
            beige100: string;
            beige200: string;
            beige300: string;
            beige400: string;
            beige500: string;
            beige600: string;
            beige700: string;
            beige800: string;
            beige900: string;
            amber50: string;
            amber100: string;
            amber200: string;
            amber300: string;
            amber400: string;
            amber500: string;
            amber600: string;
            amber700: string;
            amber800: string;
            amber900: string;
            amberA100: string;
            amberA200: string;
            amberA400: string;
            amberA700: string;
            grayRiver50: string;
            grayRiver100: string;
            grayRiver200: string;
            grayRiver300: string;
            grayRiver400: string;
            grayRiver500: string;
            grayRiver600: string;
            grayRiver700: string;
            grayRiver800: string;
            grayRiver900: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            sucess50: string;
            sucess100: string;
            sucess200: string;
            sucess300: string;
            sucess400: string;
            sucess500: string;
            sucess600: string;
            sucess700: string;
            sucess800: string;
            sucess900: string;
            error50: string;
            error100: string;
            error200: string;
            error300: string;
            error400: string;
            error500: string;
            error600: string;
            error700: string;
            error800: string;
            error900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            semiBold: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            full: string;
        };
        space: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '3xl': string;
            '4xl': string;
            '5xl': string;
        };
        shadows: {
            shadow: string;
            'shadow-md': string;
            'shadow-lg': string;
            'shadow-xl': string;
        };
        media: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{}, {
    colors: {
        white: string;
        black: string;
        linkActive: string;
        linkVisited: string;
        blue50: string;
        blue100: string;
        blue200: string;
        blue300: string;
        blue400: string;
        blue500: string;
        blue600: string;
        blue700: string;
        blue800: string;
        blue900: string;
        blueA100: string;
        blueA200: string;
        blueA400: string;
        blueA700: string;
        beige50: string;
        beige100: string;
        beige200: string;
        beige300: string;
        beige400: string;
        beige500: string;
        beige600: string;
        beige700: string;
        beige800: string;
        beige900: string;
        amber50: string;
        amber100: string;
        amber200: string;
        amber300: string;
        amber400: string;
        amber500: string;
        amber600: string;
        amber700: string;
        amber800: string;
        amber900: string;
        amberA100: string;
        amberA200: string;
        amberA400: string;
        amberA700: string;
        grayRiver50: string;
        grayRiver100: string;
        grayRiver200: string;
        grayRiver300: string;
        grayRiver400: string;
        grayRiver500: string;
        grayRiver600: string;
        grayRiver700: string;
        grayRiver800: string;
        grayRiver900: string;
        gray50: string;
        gray100: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        gray900: string;
        sucess50: string;
        sucess100: string;
        sucess200: string;
        sucess300: string;
        sucess400: string;
        sucess500: string;
        sucess600: string;
        sucess700: string;
        sucess800: string;
        sucess900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        green50: string;
        green100: string;
        green200: string;
        green300: string;
        green400: string;
        green500: string;
        green600: string;
        green700: string;
        green800: string;
        green900: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        semiBold: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        full: string;
    };
    space: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    shadows: {
        shadow: string;
        'shadow-md': string;
        'shadow-lg': string;
        'shadow-xl': string;
    };
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>; })[]) => {
    (): string;
};
declare const keyframes: (style: {
    [offset: string]: _stitches_react_types_css_util.CSS<{}, {
        colors: {
            white: string;
            black: string;
            linkActive: string;
            linkVisited: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            blueA100: string;
            blueA200: string;
            blueA400: string;
            blueA700: string;
            beige50: string;
            beige100: string;
            beige200: string;
            beige300: string;
            beige400: string;
            beige500: string;
            beige600: string;
            beige700: string;
            beige800: string;
            beige900: string;
            amber50: string;
            amber100: string;
            amber200: string;
            amber300: string;
            amber400: string;
            amber500: string;
            amber600: string;
            amber700: string;
            amber800: string;
            amber900: string;
            amberA100: string;
            amberA200: string;
            amberA400: string;
            amberA700: string;
            grayRiver50: string;
            grayRiver100: string;
            grayRiver200: string;
            grayRiver300: string;
            grayRiver400: string;
            grayRiver500: string;
            grayRiver600: string;
            grayRiver700: string;
            grayRiver800: string;
            grayRiver900: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            sucess50: string;
            sucess100: string;
            sucess200: string;
            sucess300: string;
            sucess400: string;
            sucess500: string;
            sucess600: string;
            sucess700: string;
            sucess800: string;
            sucess900: string;
            error50: string;
            error100: string;
            error200: string;
            error300: string;
            error400: string;
            error500: string;
            error600: string;
            error700: string;
            error800: string;
            error900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            semiBold: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            full: string;
        };
        space: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '3xl': string;
            '4xl': string;
            '5xl': string;
        };
        shadows: {
            shadow: string;
            'shadow-md': string;
            'shadow-lg': string;
            'shadow-xl': string;
        };
        media: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
}) => {
    (): string;
    name: string;
};
declare const getCssText: () => string;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        white: _stitches_react_types_theme.Token<"white", string, "colors", "">;
        black: _stitches_react_types_theme.Token<"black", string, "colors", "">;
        linkActive: _stitches_react_types_theme.Token<"linkActive", string, "colors", "">;
        linkVisited: _stitches_react_types_theme.Token<"linkVisited", string, "colors", "">;
        blue50: _stitches_react_types_theme.Token<"blue50", string, "colors", "">;
        blue100: _stitches_react_types_theme.Token<"blue100", string, "colors", "">;
        blue200: _stitches_react_types_theme.Token<"blue200", string, "colors", "">;
        blue300: _stitches_react_types_theme.Token<"blue300", string, "colors", "">;
        blue400: _stitches_react_types_theme.Token<"blue400", string, "colors", "">;
        blue500: _stitches_react_types_theme.Token<"blue500", string, "colors", "">;
        blue600: _stitches_react_types_theme.Token<"blue600", string, "colors", "">;
        blue700: _stitches_react_types_theme.Token<"blue700", string, "colors", "">;
        blue800: _stitches_react_types_theme.Token<"blue800", string, "colors", "">;
        blue900: _stitches_react_types_theme.Token<"blue900", string, "colors", "">;
        blueA100: _stitches_react_types_theme.Token<"blueA100", string, "colors", "">;
        blueA200: _stitches_react_types_theme.Token<"blueA200", string, "colors", "">;
        blueA400: _stitches_react_types_theme.Token<"blueA400", string, "colors", "">;
        blueA700: _stitches_react_types_theme.Token<"blueA700", string, "colors", "">;
        beige50: _stitches_react_types_theme.Token<"beige50", string, "colors", "">;
        beige100: _stitches_react_types_theme.Token<"beige100", string, "colors", "">;
        beige200: _stitches_react_types_theme.Token<"beige200", string, "colors", "">;
        beige300: _stitches_react_types_theme.Token<"beige300", string, "colors", "">;
        beige400: _stitches_react_types_theme.Token<"beige400", string, "colors", "">;
        beige500: _stitches_react_types_theme.Token<"beige500", string, "colors", "">;
        beige600: _stitches_react_types_theme.Token<"beige600", string, "colors", "">;
        beige700: _stitches_react_types_theme.Token<"beige700", string, "colors", "">;
        beige800: _stitches_react_types_theme.Token<"beige800", string, "colors", "">;
        beige900: _stitches_react_types_theme.Token<"beige900", string, "colors", "">;
        amber50: _stitches_react_types_theme.Token<"amber50", string, "colors", "">;
        amber100: _stitches_react_types_theme.Token<"amber100", string, "colors", "">;
        amber200: _stitches_react_types_theme.Token<"amber200", string, "colors", "">;
        amber300: _stitches_react_types_theme.Token<"amber300", string, "colors", "">;
        amber400: _stitches_react_types_theme.Token<"amber400", string, "colors", "">;
        amber500: _stitches_react_types_theme.Token<"amber500", string, "colors", "">;
        amber600: _stitches_react_types_theme.Token<"amber600", string, "colors", "">;
        amber700: _stitches_react_types_theme.Token<"amber700", string, "colors", "">;
        amber800: _stitches_react_types_theme.Token<"amber800", string, "colors", "">;
        amber900: _stitches_react_types_theme.Token<"amber900", string, "colors", "">;
        amberA100: _stitches_react_types_theme.Token<"amberA100", string, "colors", "">;
        amberA200: _stitches_react_types_theme.Token<"amberA200", string, "colors", "">;
        amberA400: _stitches_react_types_theme.Token<"amberA400", string, "colors", "">;
        amberA700: _stitches_react_types_theme.Token<"amberA700", string, "colors", "">;
        grayRiver50: _stitches_react_types_theme.Token<"grayRiver50", string, "colors", "">;
        grayRiver100: _stitches_react_types_theme.Token<"grayRiver100", string, "colors", "">;
        grayRiver200: _stitches_react_types_theme.Token<"grayRiver200", string, "colors", "">;
        grayRiver300: _stitches_react_types_theme.Token<"grayRiver300", string, "colors", "">;
        grayRiver400: _stitches_react_types_theme.Token<"grayRiver400", string, "colors", "">;
        grayRiver500: _stitches_react_types_theme.Token<"grayRiver500", string, "colors", "">;
        grayRiver600: _stitches_react_types_theme.Token<"grayRiver600", string, "colors", "">;
        grayRiver700: _stitches_react_types_theme.Token<"grayRiver700", string, "colors", "">;
        grayRiver800: _stitches_react_types_theme.Token<"grayRiver800", string, "colors", "">;
        grayRiver900: _stitches_react_types_theme.Token<"grayRiver900", string, "colors", "">;
        gray50: _stitches_react_types_theme.Token<"gray50", string, "colors", "">;
        gray100: _stitches_react_types_theme.Token<"gray100", string, "colors", "">;
        gray200: _stitches_react_types_theme.Token<"gray200", string, "colors", "">;
        gray300: _stitches_react_types_theme.Token<"gray300", string, "colors", "">;
        gray400: _stitches_react_types_theme.Token<"gray400", string, "colors", "">;
        gray500: _stitches_react_types_theme.Token<"gray500", string, "colors", "">;
        gray600: _stitches_react_types_theme.Token<"gray600", string, "colors", "">;
        gray700: _stitches_react_types_theme.Token<"gray700", string, "colors", "">;
        gray800: _stitches_react_types_theme.Token<"gray800", string, "colors", "">;
        gray900: _stitches_react_types_theme.Token<"gray900", string, "colors", "">;
        sucess50: _stitches_react_types_theme.Token<"sucess50", string, "colors", "">;
        sucess100: _stitches_react_types_theme.Token<"sucess100", string, "colors", "">;
        sucess200: _stitches_react_types_theme.Token<"sucess200", string, "colors", "">;
        sucess300: _stitches_react_types_theme.Token<"sucess300", string, "colors", "">;
        sucess400: _stitches_react_types_theme.Token<"sucess400", string, "colors", "">;
        sucess500: _stitches_react_types_theme.Token<"sucess500", string, "colors", "">;
        sucess600: _stitches_react_types_theme.Token<"sucess600", string, "colors", "">;
        sucess700: _stitches_react_types_theme.Token<"sucess700", string, "colors", "">;
        sucess800: _stitches_react_types_theme.Token<"sucess800", string, "colors", "">;
        sucess900: _stitches_react_types_theme.Token<"sucess900", string, "colors", "">;
        error50: _stitches_react_types_theme.Token<"error50", string, "colors", "">;
        error100: _stitches_react_types_theme.Token<"error100", string, "colors", "">;
        error200: _stitches_react_types_theme.Token<"error200", string, "colors", "">;
        error300: _stitches_react_types_theme.Token<"error300", string, "colors", "">;
        error400: _stitches_react_types_theme.Token<"error400", string, "colors", "">;
        error500: _stitches_react_types_theme.Token<"error500", string, "colors", "">;
        error600: _stitches_react_types_theme.Token<"error600", string, "colors", "">;
        error700: _stitches_react_types_theme.Token<"error700", string, "colors", "">;
        error800: _stitches_react_types_theme.Token<"error800", string, "colors", "">;
        error900: _stitches_react_types_theme.Token<"error900", string, "colors", "">;
        green50: _stitches_react_types_theme.Token<"green50", string, "colors", "">;
        green100: _stitches_react_types_theme.Token<"green100", string, "colors", "">;
        green200: _stitches_react_types_theme.Token<"green200", string, "colors", "">;
        green300: _stitches_react_types_theme.Token<"green300", string, "colors", "">;
        green400: _stitches_react_types_theme.Token<"green400", string, "colors", "">;
        green500: _stitches_react_types_theme.Token<"green500", string, "colors", "">;
        green600: _stitches_react_types_theme.Token<"green600", string, "colors", "">;
        green700: _stitches_react_types_theme.Token<"green700", string, "colors", "">;
        green800: _stitches_react_types_theme.Token<"green800", string, "colors", "">;
        green900: _stitches_react_types_theme.Token<"green900", string, "colors", "">;
    };
    fontSizes: {
        xxs: _stitches_react_types_theme.Token<"xxs", string, "fontSizes", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "fontSizes", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "fontSizes", "">;
        md: _stitches_react_types_theme.Token<"md", string, "fontSizes", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "fontSizes", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "fontSizes", "">;
        '2xl': _stitches_react_types_theme.Token<"2xl", string, "fontSizes", "">;
        '4xl': _stitches_react_types_theme.Token<"4xl", string, "fontSizes", "">;
        '5xl': _stitches_react_types_theme.Token<"5xl", string, "fontSizes", "">;
        '6xl': _stitches_react_types_theme.Token<"6xl", string, "fontSizes", "">;
        '7xl': _stitches_react_types_theme.Token<"7xl", string, "fontSizes", "">;
        '8xl': _stitches_react_types_theme.Token<"8xl", string, "fontSizes", "">;
        '9xl': _stitches_react_types_theme.Token<"9xl", string, "fontSizes", "">;
    };
    fontWeights: {
        regular: _stitches_react_types_theme.Token<"regular", string, "fontWeights", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "">;
        semiBold: _stitches_react_types_theme.Token<"semiBold", string, "fontWeights", "">;
        bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "">;
    };
    fonts: {
        default: _stitches_react_types_theme.Token<"default", string, "fonts", "">;
        code: _stitches_react_types_theme.Token<"code", string, "fonts", "">;
    };
    lineHeights: {
        shorter: _stitches_react_types_theme.Token<"shorter", string, "lineHeights", "">;
        short: _stitches_react_types_theme.Token<"short", string, "lineHeights", "">;
        base: _stitches_react_types_theme.Token<"base", string, "lineHeights", "">;
        tall: _stitches_react_types_theme.Token<"tall", string, "lineHeights", "">;
    };
    radii: {
        px: _stitches_react_types_theme.Token<"px", string, "radii", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "radii", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "radii", "">;
        md: _stitches_react_types_theme.Token<"md", string, "radii", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "radii", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "radii", "">;
        '2xl': _stitches_react_types_theme.Token<"2xl", string, "radii", "">;
        full: _stitches_react_types_theme.Token<"full", string, "radii", "">;
    };
    space: {
        none: _stitches_react_types_theme.Token<"none", string, "space", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "space", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "space", "">;
        md: _stitches_react_types_theme.Token<"md", string, "space", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "space", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "space", "">;
        '2xl': _stitches_react_types_theme.Token<"2xl", string, "space", "">;
        '3xl': _stitches_react_types_theme.Token<"3xl", string, "space", "">;
        '4xl': _stitches_react_types_theme.Token<"4xl", string, "space", "">;
        '5xl': _stitches_react_types_theme.Token<"5xl", string, "space", "">;
    };
    shadows: {
        shadow: _stitches_react_types_theme.Token<"shadow", string, "shadows", "">;
        'shadow-md': _stitches_react_types_theme.Token<"shadow-md", string, "shadows", "">;
        'shadow-lg': _stitches_react_types_theme.Token<"shadow-lg", string, "shadows", "">;
        'shadow-xl': _stitches_react_types_theme.Token<"shadow-xl", string, "shadows", "">;
    };
    media: {
        xs: _stitches_react_types_theme.Token<"xs", string, "media", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "media", "">;
        md: _stitches_react_types_theme.Token<"md", string, "media", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "media", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "media", "">;
    };
};
declare const createTheme: <Argument0 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        linkActive?: string | number | boolean | undefined;
        linkVisited?: string | number | boolean | undefined;
        blue50?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
        blueA100?: string | number | boolean | undefined;
        blueA200?: string | number | boolean | undefined;
        blueA400?: string | number | boolean | undefined;
        blueA700?: string | number | boolean | undefined;
        beige50?: string | number | boolean | undefined;
        beige100?: string | number | boolean | undefined;
        beige200?: string | number | boolean | undefined;
        beige300?: string | number | boolean | undefined;
        beige400?: string | number | boolean | undefined;
        beige500?: string | number | boolean | undefined;
        beige600?: string | number | boolean | undefined;
        beige700?: string | number | boolean | undefined;
        beige800?: string | number | boolean | undefined;
        beige900?: string | number | boolean | undefined;
        amber50?: string | number | boolean | undefined;
        amber100?: string | number | boolean | undefined;
        amber200?: string | number | boolean | undefined;
        amber300?: string | number | boolean | undefined;
        amber400?: string | number | boolean | undefined;
        amber500?: string | number | boolean | undefined;
        amber600?: string | number | boolean | undefined;
        amber700?: string | number | boolean | undefined;
        amber800?: string | number | boolean | undefined;
        amber900?: string | number | boolean | undefined;
        amberA100?: string | number | boolean | undefined;
        amberA200?: string | number | boolean | undefined;
        amberA400?: string | number | boolean | undefined;
        amberA700?: string | number | boolean | undefined;
        grayRiver50?: string | number | boolean | undefined;
        grayRiver100?: string | number | boolean | undefined;
        grayRiver200?: string | number | boolean | undefined;
        grayRiver300?: string | number | boolean | undefined;
        grayRiver400?: string | number | boolean | undefined;
        grayRiver500?: string | number | boolean | undefined;
        grayRiver600?: string | number | boolean | undefined;
        grayRiver700?: string | number | boolean | undefined;
        grayRiver800?: string | number | boolean | undefined;
        grayRiver900?: string | number | boolean | undefined;
        gray50?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        gray900?: string | number | boolean | undefined;
        sucess50?: string | number | boolean | undefined;
        sucess100?: string | number | boolean | undefined;
        sucess200?: string | number | boolean | undefined;
        sucess300?: string | number | boolean | undefined;
        sucess400?: string | number | boolean | undefined;
        sucess500?: string | number | boolean | undefined;
        sucess600?: string | number | boolean | undefined;
        sucess700?: string | number | boolean | undefined;
        sucess800?: string | number | boolean | undefined;
        sucess900?: string | number | boolean | undefined;
        error50?: string | number | boolean | undefined;
        error100?: string | number | boolean | undefined;
        error200?: string | number | boolean | undefined;
        error300?: string | number | boolean | undefined;
        error400?: string | number | boolean | undefined;
        error500?: string | number | boolean | undefined;
        error600?: string | number | boolean | undefined;
        error700?: string | number | boolean | undefined;
        error800?: string | number | boolean | undefined;
        error900?: string | number | boolean | undefined;
        green50?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xxs?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semiBold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        px?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        none?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '3xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        shadow?: string | number | boolean | undefined;
        'shadow-md'?: string | number | boolean | undefined;
        'shadow-lg'?: string | number | boolean | undefined;
        'shadow-xl'?: string | number | boolean | undefined;
    } | undefined;
    media?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        linkActive?: string | number | boolean | undefined;
        linkVisited?: string | number | boolean | undefined;
        blue50?: string | number | boolean | undefined;
        blue100?: string | number | boolean | undefined;
        blue200?: string | number | boolean | undefined;
        blue300?: string | number | boolean | undefined;
        blue400?: string | number | boolean | undefined;
        blue500?: string | number | boolean | undefined;
        blue600?: string | number | boolean | undefined;
        blue700?: string | number | boolean | undefined;
        blue800?: string | number | boolean | undefined;
        blue900?: string | number | boolean | undefined;
        blueA100?: string | number | boolean | undefined;
        blueA200?: string | number | boolean | undefined;
        blueA400?: string | number | boolean | undefined;
        blueA700?: string | number | boolean | undefined;
        beige50?: string | number | boolean | undefined;
        beige100?: string | number | boolean | undefined;
        beige200?: string | number | boolean | undefined;
        beige300?: string | number | boolean | undefined;
        beige400?: string | number | boolean | undefined;
        beige500?: string | number | boolean | undefined;
        beige600?: string | number | boolean | undefined;
        beige700?: string | number | boolean | undefined;
        beige800?: string | number | boolean | undefined;
        beige900?: string | number | boolean | undefined;
        amber50?: string | number | boolean | undefined;
        amber100?: string | number | boolean | undefined;
        amber200?: string | number | boolean | undefined;
        amber300?: string | number | boolean | undefined;
        amber400?: string | number | boolean | undefined;
        amber500?: string | number | boolean | undefined;
        amber600?: string | number | boolean | undefined;
        amber700?: string | number | boolean | undefined;
        amber800?: string | number | boolean | undefined;
        amber900?: string | number | boolean | undefined;
        amberA100?: string | number | boolean | undefined;
        amberA200?: string | number | boolean | undefined;
        amberA400?: string | number | boolean | undefined;
        amberA700?: string | number | boolean | undefined;
        grayRiver50?: string | number | boolean | undefined;
        grayRiver100?: string | number | boolean | undefined;
        grayRiver200?: string | number | boolean | undefined;
        grayRiver300?: string | number | boolean | undefined;
        grayRiver400?: string | number | boolean | undefined;
        grayRiver500?: string | number | boolean | undefined;
        grayRiver600?: string | number | boolean | undefined;
        grayRiver700?: string | number | boolean | undefined;
        grayRiver800?: string | number | boolean | undefined;
        grayRiver900?: string | number | boolean | undefined;
        gray50?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        gray900?: string | number | boolean | undefined;
        sucess50?: string | number | boolean | undefined;
        sucess100?: string | number | boolean | undefined;
        sucess200?: string | number | boolean | undefined;
        sucess300?: string | number | boolean | undefined;
        sucess400?: string | number | boolean | undefined;
        sucess500?: string | number | boolean | undefined;
        sucess600?: string | number | boolean | undefined;
        sucess700?: string | number | boolean | undefined;
        sucess800?: string | number | boolean | undefined;
        sucess900?: string | number | boolean | undefined;
        error50?: string | number | boolean | undefined;
        error100?: string | number | boolean | undefined;
        error200?: string | number | boolean | undefined;
        error300?: string | number | boolean | undefined;
        error400?: string | number | boolean | undefined;
        error500?: string | number | boolean | undefined;
        error600?: string | number | boolean | undefined;
        error700?: string | number | boolean | undefined;
        error800?: string | number | boolean | undefined;
        error900?: string | number | boolean | undefined;
        green50?: string | number | boolean | undefined;
        green100?: string | number | boolean | undefined;
        green200?: string | number | boolean | undefined;
        green300?: string | number | boolean | undefined;
        green400?: string | number | boolean | undefined;
        green500?: string | number | boolean | undefined;
        green600?: string | number | boolean | undefined;
        green700?: string | number | boolean | undefined;
        green800?: string | number | boolean | undefined;
        green900?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xxs?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semiBold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        px?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        none?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '3xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
    } | undefined;
    shadows?: {
        shadow?: string | number | boolean | undefined;
        'shadow-md'?: string | number | boolean | undefined;
        'shadow-lg'?: string | number | boolean | undefined;
        'shadow-xl'?: string | number | boolean | undefined;
    } | undefined;
    media?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, ""> : _stitches_react_types_stitches.ThemeTokens<Argument0, "">);
declare const config: {
    prefix: "";
    media: {};
    theme: {
        colors: {
            white: string;
            black: string;
            linkActive: string;
            linkVisited: string;
            blue50: string;
            blue100: string;
            blue200: string;
            blue300: string;
            blue400: string;
            blue500: string;
            blue600: string;
            blue700: string;
            blue800: string;
            blue900: string;
            blueA100: string;
            blueA200: string;
            blueA400: string;
            blueA700: string;
            beige50: string;
            beige100: string;
            beige200: string;
            beige300: string;
            beige400: string;
            beige500: string;
            beige600: string;
            beige700: string;
            beige800: string;
            beige900: string;
            amber50: string;
            amber100: string;
            amber200: string;
            amber300: string;
            amber400: string;
            amber500: string;
            amber600: string;
            amber700: string;
            amber800: string;
            amber900: string;
            amberA100: string;
            amberA200: string;
            amberA400: string;
            amberA700: string;
            grayRiver50: string;
            grayRiver100: string;
            grayRiver200: string;
            grayRiver300: string;
            grayRiver400: string;
            grayRiver500: string;
            grayRiver600: string;
            grayRiver700: string;
            grayRiver800: string;
            grayRiver900: string;
            gray50: string;
            gray100: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            gray900: string;
            sucess50: string;
            sucess100: string;
            sucess200: string;
            sucess300: string;
            sucess400: string;
            sucess500: string;
            sucess600: string;
            sucess700: string;
            sucess800: string;
            sucess900: string;
            error50: string;
            error100: string;
            error200: string;
            error300: string;
            error400: string;
            error500: string;
            error600: string;
            error700: string;
            error800: string;
            error900: string;
            green50: string;
            green100: string;
            green200: string;
            green300: string;
            green400: string;
            green500: string;
            green600: string;
            green700: string;
            green800: string;
            green900: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            semiBold: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            full: string;
        };
        space: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '3xl': string;
            '4xl': string;
            '5xl': string;
        };
        shadows: {
            shadow: string;
            'shadow-md': string;
            'shadow-lg': string;
            'shadow-xl': string;
        };
        media: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
        };
    };
    themeMap: {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {};
};

export { Button, type ButtonProps, TextInput, type TextInputProps, config, createTheme, css, getCssText, globalCss, keyframes, styled, theme };
